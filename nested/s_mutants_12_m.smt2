(set-logic HORN)
(declare-fun inv (Int Int Int Int Int Int) Bool)
(declare-fun inv1 (Int Int Int Int Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((x Int) (i Int) (j Int) (k Int) (l Int) (m Int))
  (=> (and (= x 1) (= i 1) (= j 1) (= k 1) (= l 1) (= m 1)) (inv x i j k l m))))
(assert (forall ((x Int) (i Int) (j Int) (k Int) (l Int) (m Int))
  (=> (inv x i j k l m) (inv1 x i j k l m))))
(assert (forall ((x Int)
         (i Int)
         (j Int)
         (k Int)
         (l Int)
         (m Int)
         (x1 Int)
         (i1 Int)
         (j1 Int)
         (k1 Int)
         (l1 Int)
         (m1 Int))
  (=> (and (inv1 x i j k l m)
           (= x1 (+ x i j k l m))
           (= i1 (+ x i j k l m))
           (= j1 (+ x i j k l m))
           (= k1 (+ x i j k l m))
           (= l1 (+ x i j k l m))
           (= m1 (+ x i j k l m)))
      (inv1 x1 i1 j1 k1 l1 m1))))
(assert (forall ((x Int) (i Int) (j Int) (k Int) (l Int) (m Int))
  (=> (inv1 x i j k l m) (inv x i j k l m))))
(assert (forall ((i Int) (j Int) (k Int) (l Int) (m Int) (x Int))
  (=> (and (inv x i j k l m) (not (>= x 1))) fail)))
(assert (=> fail false))
(check-sat)
