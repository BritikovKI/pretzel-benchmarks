(set-logic HORN)
(declare-fun WRAP (Int Int Int Int) Bool)
(declare-fun NEST (Int Int Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((x Int) (y Int) (i Int) (j Int))
  (=> (and (= x 0) (= y 0) (= i 0) (= j 0)) (WRAP x y i j))))
(assert (forall ((x Int) (y Int) (i Int) (j Int)) (=> (WRAP x y i j) (NEST x y i j))))
(assert (forall ((i Int) (j Int) (x Int) (y Int) (i1 Int) (j1 Int))
  (let ((a!1 (and (NEST x y i j)
                  (= i1 (ite (= x y) (+ i 1) i))
                  (= j1 (ite (= x y) j (+ j 1))))))
    (=> a!1 (NEST x y i1 j1)))))
(assert (forall ((y Int) (x Int) (x1 Int) (y1 Int) (i Int) (j Int))
  (let ((a!1 (and (NEST x y i j) (= y1 (+ y 1)) (= x1 (ite (>= i j) (+ x 1) x)))))
    (=> a!1 (WRAP x1 y1 i j)))))
(assert (forall ((x Int) (y Int) (i Int) (j Int))
  (=> (and (WRAP x y i j) (<= i (- j 1))) fail)))
(assert (=> fail false))
(check-sat)
