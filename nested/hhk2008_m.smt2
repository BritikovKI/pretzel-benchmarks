(set-logic HORN)
(declare-fun inv1 (Int Int Int Int) Bool)
(declare-fun inv2 (Int Int Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((x1 Int) (y1 Int) (res1 Int) (cnt1 Int))
  (=> (and (<= x1 1000) (<= 0 y1) (<= y1 100) (= res1 x1) (= cnt1 y1))
      (inv1 x1 y1 res1 cnt1))))
(assert (forall ((cnt0 Int) (res0 Int) (x1 Int) (y1 Int) (res1 Int) (cnt1 Int))
  (=> (and (inv1 x1 y1 res0 cnt0) (= cnt1 (+ cnt0 100)) (= res1 (- res0 100)))
      (inv2 x1 y1 res1 cnt1))))
(assert (forall ((cnt0 Int) (res0 Int) (x0 Int) (y0 Int) (res1 Int) (cnt1 Int))
  (=> (and (inv2 x0 y0 res0 cnt0)
           (> cnt0 0)
           (= cnt1 (- cnt0 1))
           (= res1 (+ res0 1)))
      (inv2 x0 y0 res1 cnt1))))
(assert (forall ((x1 Int) (y1 Int) (res1 Int) (cnt1 Int))
  (=> (inv2 x1 y1 res1 cnt1) (inv1 x1 y1 res1 cnt1))))
(assert (forall ((cnt1 Int) (res1 Int) (x1 Int) (y1 Int))
  (let ((a!1 (and (inv1 x1 y1 res1 cnt1) (<= cnt1 0) (not (= res1 (+ x1 y1))))))
    (=> a!1 fail))))
(assert (=> fail false))
(check-sat)
