(set-logic HORN)
(declare-fun inv (Int Int Int Int) Bool)
(declare-fun inv1 (Int Int Int Int) Bool)
(declare-fun inv2 (Int Int Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((z1 Int) (x1 Int) (y1 Int) (w1 Int))
  (=> (and (= z1 0) (= x1 0) (= y1 0) (= w1 1)) (inv z1 x1 y1 w1))))
(assert (forall ((z0 Int) (x0 Int) (y0 Int) (w0 Int))
  (=> (inv z0 x0 y0 w0) (inv1 z0 x0 y0 w0))))
(assert (forall ((z0 Int) (x0 Int) (y0 Int) (w0 Int))
  (=> (inv1 z0 x0 y0 w0) (inv2 z0 x0 y0 w0))))
(assert (forall ((x0 Int)
         (w0 Int)
         (y0 Int)
         (z0 Int)
         (z1 Int)
         (x1 Int)
         (y1 Int)
         (w1 Int))
  (let ((a!1 (and (inv2 z0 x0 y0 w0)
                  (= x1 (ite (= w0 1) (+ x0 1) x0))
                  (= w1 (ite (= w0 1) 0 1))
                  (= y1 (ite (= z0 0) (+ y0 1) y0))
                  (= z1 (ite (= z0 0) 1 0)))))
    (=> a!1 (inv2 z1 x1 y1 w1)))))
(assert (forall ((z0 Int) (x0 Int) (y0 Int) (w0 Int))
  (=> (inv2 z0 x0 y0 w0) (inv1 z0 x0 y0 w0))))
(assert (forall ((z0 Int) (x0 Int) (y0 Int) (w0 Int))
  (=> (inv1 z0 x0 y0 w0) (inv z0 x0 y0 w0))))
(assert (forall ((z1 Int) (w1 Int) (x1 Int) (y1 Int))
  (=> (and (inv z1 x1 y1 w1) (not (= x1 y1))) fail)))
(assert (=> fail false))
(check-sat)
