(set-logic HORN)
(declare-fun WRAP (Int Int Int Int) Bool)
(declare-fun NEST (Int Int Int Int) Bool)
(declare-fun fail () Bool)
(assert (forall ((i Int) (j Int) (k Int) (n Int))
  (=> (and (= k 1) (= i 1) (= j 0)) (WRAP i j k n))))
(assert (forall ((j Int) (i Int) (j1 Int) (k Int) (n Int))
  (=> (and (WRAP i j k n) (<= i (- n 1)) (= j1 0)) (NEST i j1 k n))))
(assert (forall ((k Int) (j Int) (i Int) (j1 Int) (k1 Int) (n Int))
  (let ((a!1 (and (NEST i j k n)
                  (<= j (- i 1))
                  (= k1 (+ k (- i j)))
                  (= j1 (+ j 1)))))
    (=> a!1 (NEST i j1 k1 n)))))
(assert (forall ((i Int) (i1 Int) (j Int) (k Int) (n Int))
  (=> (and (NEST i j k n) (>= j i) (= i1 (+ i 1))) (WRAP i1 j k n))))
(assert (forall ((j Int) (i Int) (k Int) (n Int))
  (=> (and (WRAP i j k n) (> i (- n 1)) (>= i n) (<= k (- n 1))) fail)))
(assert (=> fail false))
(check-sat)
