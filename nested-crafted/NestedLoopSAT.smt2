(set-logic HORN)
(set-info :source |
  Benchmark: ../golem/build/NestedLoopSAT.c
  Generated by Korn 0.4 https://github.com/gernst/korn
|)

(declare-fun $main_sum3 (Int Int Int Int) Bool)
(declare-fun $main_inv2 (Int Int Int Int) Bool)
(declare-fun $__VERIFIER_assert_pre (Int) Bool)
(declare-fun $__VERIFIER_assert_if1 (Int Int) Bool)
(declare-fun $main_sum1 (Int Int Int Int) Bool)
(declare-fun $main_inv3 (Int Int Int Int) Bool)
(declare-fun __VERIFIER_assert (Int) Bool)
(declare-fun $main_sum2 (Int Int Int Int) Bool)
(declare-fun $main_inv1 (Int Int Int Int) Bool)
(declare-fun $__VERIFIER_assert_ERROR (Int Int) Bool)

; label ERROR
(assert
  (forall ((cond!1 Int))
    (=> (and (not (not (= cond!1 0)))
             ($__VERIFIER_assert_pre cond!1))
        ($__VERIFIER_assert_ERROR cond!1 cond!1))))

; error
(assert
  (forall ((cond!1 Int) (cond!2 Int))
    (=> (and ($__VERIFIER_assert_ERROR cond!1 cond!2))
        false)))

; if else
(assert
  (forall ((cond!1 Int))
    (=> (and (not (not (not (= cond!1 0))))
             ($__VERIFIER_assert_pre cond!1))
        ($__VERIFIER_assert_if1 cond!1 cond!1))))

; post __VERIFIER_assert
(assert
  (forall ((cond!1 Int) (cond!3 Int))
    (=> (and ($__VERIFIER_assert_if1 cond!1 cond!3))
        (__VERIFIER_assert cond!1))))

; loop entry $main_inv1 (line 11)
(assert
  (forall ((x0!4 Int) (x1!5 Int) (x2!6 Int))
    (=> (and (<= 0 x1!5)
             (<= x1!5 5)
             (<= 0 x0!4)
             (<= x0!4 10))
        ($main_inv1 x0!4 x1!5 x2!6 0))))

; loop term $main_sum1 (line 11)
(assert
  (forall ((x0!8 Int) (x1!9 Int) (x2!10 Int) (x3!11 Int))
    (=> (and (not (< x3!11 100))
             ($main_inv1 x0!8 x1!9 x2!10 x3!11))
        ($main_sum1 x0!8 x1!9 x2!10 x3!11))))

; loop entry $main_inv2 (line 12)
(assert
  (forall ((x0!8 Int) (x1!9 Int) (x2!10 Int) (x3!11 Int))
    (=> (and (< x3!11 100)
             ($main_inv1 x0!8 x1!9 x2!10 x3!11))
        ($main_inv2 x0!8 x1!9 x2!10 x3!11))))

; loop term $main_sum2 (line 12)
(assert
  (forall ((x0!12 Int) (x1!13 Int) (x2!14 Int) (x3!15 Int))
    (=> (and (not (< x0!12 15))
             ($main_inv2 x0!12 x1!13 x2!14 x3!15))
        ($main_sum2 x0!12 x1!13 x2!14 x3!15))))

; forwards $main_inv2 (line 12)
(assert
  (forall ((x0!12 Int) (x1!13 Int) (x2!14 Int) (x3!15 Int))
    (=> (and (< x0!12 15)
             ($main_inv2 x0!12 x1!13 x2!14 x3!15))
        ($main_inv2 (+ x0!12 1) (+ x1!13 1) x2!14 x3!15))))

; loop entry $main_inv3 (line 16)
(assert
  (forall ((x0!16 Int) (x1!17 Int) (x2!18 Int) (x3!19 Int))
    (=> (and ($main_sum2 x0!16 x1!17 x2!18 x3!19))
        ($main_inv3 x0!16 x1!17 x2!18 x3!19))))

; loop term $main_sum3 (line 16)
(assert
  (forall ((x0!20 Int) (x1!21 Int) (x2!22 Int) (x3!23 Int))
    (=> (and (not (> x1!21 0))
             ($main_inv3 x0!20 x1!21 x2!22 x3!23))
        ($main_sum3 x0!20 x1!21 x2!22 x3!23))))

; forwards $main_inv3 (line 16)
(assert
  (forall ((x0!20 Int) (x1!21 Int) (x2!22 Int) (x3!23 Int))
    (=> (and (> x1!21 0)
             ($main_inv3 x0!20 x1!21 x2!22 x3!23))
        ($main_inv3 (- x0!20 1) (- x1!21 1) x2!22 x3!23))))

; forwards $main_inv1 (line 11)
(assert
  (forall ((x0!24 Int) (x1!25 Int) (x2!26 Int) (x3!27 Int))
    (=> (and ($main_sum3 x0!24 x1!25 x2!26 x3!27))
        ($main_inv1 x0!24 x1!25 x2!26 (+ x3!27 1)))))

; VERIFIER_assert (= x1!29 0)
(assert
  (forall ((x1!29 Int) (x0!28 Int) (x2!30 Int) (x3!31 Int))
    (=> (and (not (= x1!29 0))
             ($main_sum1 x0!28 x1!29 x2!30 x3!31))
        false)))

(check-sat)
