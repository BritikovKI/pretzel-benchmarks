(set-logic HORN)
(declare-fun verifier.error (Bool Bool Bool) Bool)
(declare-fun main@entry () Bool)
(declare-fun main@.lr.ph5 (Int Int Int Int Int) Bool)
(declare-fun main@verifier.error.split () Bool)
(declare-fun main@.lr.ph (Int Int) Bool)
(assert (=> true (verifier.error false false false)))
(assert (=> true (verifier.error false true true)))
(assert (=> true (verifier.error true false true)))
(assert (=> true (verifier.error true true true)))
(assert (=> true main@entry))
(assert (forall ((main@%_2_0 Int)
         (main@%.04.i3_1 Int)
         (main@%_1_0 Int)
         (main@%.03.i4_1 Int)
         (main@%loop.bound_0 Int)
         (main@.lr.ph5_0 Bool)
         (main@%.04.i3_0 Int)
         (main@entry_0 Bool)
         (main@%.03.i4_0 Int)
         (main@%_8_0 Bool)
         (main@%_7_0 Bool)
         (main@%_5_0 Bool)
         (main@%_6_0 Bool)
         (main@%_3_0 Int)
         (main@%_4_0 Int)
         (main@%_0_0 Bool))
  (=> (and main@entry
           (= main@%_0_0 (= main@%loop.bound_0 1))
           main@%_0_0
           (= main@%_5_0 (> main@%_4_0 49))
           (= main@%_6_0 (< main@%_3_0 10001))
           (= main@%_7_0 (and main@%_6_0 main@%_5_0))
           main@%_7_0
           (= main@%_8_0 (> main@%_2_0 0))
           (=> main@.lr.ph5_0 (and main@.lr.ph5_0 main@entry_0))
           (=> (and main@.lr.ph5_0 main@entry_0) main@%_8_0)
           (=> (and main@.lr.ph5_0 main@entry_0) (= main@%.03.i4_0 0))
           (=> (and main@.lr.ph5_0 main@entry_0) (= main@%.04.i3_0 0))
           (=> (and main@.lr.ph5_0 main@entry_0)
               (= main@%.03.i4_1 main@%.03.i4_0))
           (=> (and main@.lr.ph5_0 main@entry_0)
               (= main@%.04.i3_1 main@%.04.i3_0))
           main@.lr.ph5_0)
      (main@.lr.ph5 main@%loop.bound_0
                    main@%.03.i4_1
                    main@%_1_0
                    main@%.04.i3_1
                    main@%_2_0))))
(assert (forall ((main@verifier.error.split_0 Bool)
         (main@verifier.error_0 Bool)
         (main@%.1.i.lcssa_1 Bool)
         (main@%.1.i.lcssa_0 Bool)
         (main@entry_0 Bool)
         (main@%_8_0 Bool)
         (main@%_2_0 Int)
         (main@%_7_0 Bool)
         (main@%_5_0 Bool)
         (main@%_6_0 Bool)
         (main@%_3_0 Int)
         (main@%_4_0 Int)
         (main@%_0_0 Bool)
         (main@%loop.bound_0 Int))
  (=> (and main@entry
           (= main@%_0_0 (= main@%loop.bound_0 1))
           main@%_0_0
           (= main@%_5_0 (> main@%_4_0 49))
           (= main@%_6_0 (< main@%_3_0 10001))
           (= main@%_7_0 (and main@%_6_0 main@%_5_0))
           main@%_7_0
           (= main@%_8_0 (> main@%_2_0 0))
           (=> main@verifier.error_0 (and main@verifier.error_0 main@entry_0))
           (=> (and main@verifier.error_0 main@entry_0) (not main@%_8_0))
           (=> (and main@verifier.error_0 main@entry_0)
               (= main@%.1.i.lcssa_0 true))
           (=> (and main@verifier.error_0 main@entry_0)
               (= main@%.1.i.lcssa_1 main@%.1.i.lcssa_0))
           (=> main@verifier.error_0 (not main@%.1.i.lcssa_1))
           (=> main@verifier.error.split_0
               (and main@verifier.error.split_0 main@verifier.error_0))
           main@verifier.error.split_0)
      main@verifier.error.split)))
(assert (forall ((main@%_2_0 Int)
         (main@%.04.i3_2 Int)
         (main@%_1_0 Int)
         (main@%.03.i4_2 Int)
         (main@%loop.bound_0 Int)
         (main@.lr.ph5_1 Bool)
         (main@%.04.i3_1 Int)
         (main@.lr.ph5_0 Bool)
         (main@%.03.i4_1 Int)
         (main@%_10_0 Int)
         (main@%_9_0 Int)
         (main@%_11_0 Bool)
         (main@%.04.i3_0 Int)
         (main@%.03.i4_0 Int))
  (=> (and (main@.lr.ph5 main@%loop.bound_0
                         main@%.03.i4_0
                         main@%_1_0
                         main@%.04.i3_0
                         main@%_2_0)
           (= main@%_9_0 (+ main@%.03.i4_0 1))
           (= main@%_10_0 (+ main@%.04.i3_0 1))
           (= main@%_11_0 (< main@%_10_0 main@%_2_0))
           (=> main@.lr.ph5_1 (and main@.lr.ph5_1 main@.lr.ph5_0))
           (=> (and main@.lr.ph5_1 main@.lr.ph5_0) main@%_11_0)
           (=> (and main@.lr.ph5_1 main@.lr.ph5_0)
               (= main@%.03.i4_1 main@%_9_0))
           (=> (and main@.lr.ph5_1 main@.lr.ph5_0)
               (= main@%.04.i3_1 main@%_10_0))
           (=> (and main@.lr.ph5_1 main@.lr.ph5_0)
               (= main@%.03.i4_2 main@%.03.i4_1))
           (=> (and main@.lr.ph5_1 main@.lr.ph5_0)
               (= main@%.04.i3_2 main@%.04.i3_1))
           main@.lr.ph5_1)
      (main@.lr.ph5 main@%loop.bound_0
                    main@%.03.i4_2
                    main@%_1_0
                    main@%.04.i3_2
                    main@%_2_0))))
(assert (forall ((main@%loop.bound_0 Int)
         (main@%.1.i2_1 Int)
         (main@.lr.ph_0 Bool)
         (main@%.1.i2_0 Int)
         (main@_15_0 Bool)
         (main@%.03.i4_0 Int)
         (main@%_16_0 Bool)
         (main@%_13_0 Bool)
         (|tuple(main@.lr.ph.peel_0, main@_15_0)| Bool)
         (main@_14_0 Bool)
         (main@.lr.ph.peel_0 Bool)
         (main@%_1_0 Int)
         (main@%_12_0 Bool)
         (main@%_11_0 Bool)
         (main@.lr.ph5_0 Bool)
         (main@%_2_0 Int)
         (main@%_10_0 Int)
         (main@%.04.i3_0 Int)
         (main@%_9_0 Int))
  (let ((a!1 (=> main@.lr.ph.peel_0
                 (= main@%_12_0 (ite (>= main@%_1_0 0) (< main@%_1_0 2) false)))))
  (let ((a!2 (and (main@.lr.ph5 main@%loop.bound_0
                                main@%.03.i4_0
                                main@%_1_0
                                main@%.04.i3_0
                                main@%_2_0)
                  (= main@%_9_0 (+ main@%.03.i4_0 1))
                  (= main@%_10_0 (+ main@%.04.i3_0 1))
                  (= main@%_11_0 (< main@%_10_0 main@%_2_0))
                  (=> main@.lr.ph.peel_0
                      (and main@.lr.ph.peel_0 main@.lr.ph5_0))
                  (=> (and main@.lr.ph.peel_0 main@.lr.ph5_0) (not main@%_11_0))
                  a!1
                  (=> main@.lr.ph.peel_0 main@%_12_0)
                  (=> main@.lr.ph.peel_0 (= main@%_13_0 (= main@%_1_0 1)))
                  (=> main@_14_0 (and main@_14_0 main@.lr.ph.peel_0))
                  (=> (and main@_14_0 main@.lr.ph.peel_0) (not main@%_13_0))
                  (=> |tuple(main@.lr.ph.peel_0, main@_15_0)|
                      main@.lr.ph.peel_0)
                  (=> main@_15_0
                      (or (and main@_15_0 main@_14_0)
                          |tuple(main@.lr.ph.peel_0, main@_15_0)|))
                  (=> |tuple(main@.lr.ph.peel_0, main@_15_0)| main@%_13_0)
                  (=> main@_15_0 (= main@%_16_0 (= main@%.03.i4_0 0)))
                  (=> main@.lr.ph_0 (and main@.lr.ph_0 main@_15_0))
                  (=> (and main@.lr.ph_0 main@_15_0) (not main@%_16_0))
                  (=> (and main@.lr.ph_0 main@_15_0)
                      (= main@%.1.i2_0 main@%.03.i4_0))
                  (=> (and main@.lr.ph_0 main@_15_0)
                      (= main@%.1.i2_1 main@%.1.i2_0))
                  main@.lr.ph_0)))
    (=> a!2 (main@.lr.ph main@%.1.i2_1 main@%loop.bound_0))))))
(assert (forall ((main@verifier.error.split_0 Bool)
         (main@verifier.error_0 Bool)
         (main@%.1.i.lcssa_1 Bool)
         (main@%.1.i.lcssa_0 Bool)
         (main@verifier.error.loopexit_0 Bool)
         (main@%phitmp_0 Bool)
         (main@%.7.i.lcssa_1 Int)
         (main@%.7.i.lcssa_0 Int)
         (main@_15_0 Bool)
         (main@%.03.i4_0 Int)
         (main@%_16_0 Bool)
         (main@%_13_0 Bool)
         (|tuple(main@.lr.ph.peel_0, main@_15_0)| Bool)
         (main@_14_0 Bool)
         (main@.lr.ph.peel_0 Bool)
         (main@%_1_0 Int)
         (main@%_12_0 Bool)
         (main@%_11_0 Bool)
         (main@.lr.ph5_0 Bool)
         (main@%_2_0 Int)
         (main@%_10_0 Int)
         (main@%.04.i3_0 Int)
         (main@%_9_0 Int)
         (main@%loop.bound_0 Int))
  (let ((a!1 (=> main@.lr.ph.peel_0
                 (= main@%_12_0 (ite (>= main@%_1_0 0) (< main@%_1_0 2) false)))))
  (let ((a!2 (and (main@.lr.ph5 main@%loop.bound_0
                                main@%.03.i4_0
                                main@%_1_0
                                main@%.04.i3_0
                                main@%_2_0)
                  (= main@%_9_0 (+ main@%.03.i4_0 1))
                  (= main@%_10_0 (+ main@%.04.i3_0 1))
                  (= main@%_11_0 (< main@%_10_0 main@%_2_0))
                  (=> main@.lr.ph.peel_0
                      (and main@.lr.ph.peel_0 main@.lr.ph5_0))
                  (=> (and main@.lr.ph.peel_0 main@.lr.ph5_0) (not main@%_11_0))
                  a!1
                  (=> main@.lr.ph.peel_0 main@%_12_0)
                  (=> main@.lr.ph.peel_0 (= main@%_13_0 (= main@%_1_0 1)))
                  (=> main@_14_0 (and main@_14_0 main@.lr.ph.peel_0))
                  (=> (and main@_14_0 main@.lr.ph.peel_0) (not main@%_13_0))
                  (=> |tuple(main@.lr.ph.peel_0, main@_15_0)|
                      main@.lr.ph.peel_0)
                  (=> main@_15_0
                      (or (and main@_15_0 main@_14_0)
                          |tuple(main@.lr.ph.peel_0, main@_15_0)|))
                  (=> |tuple(main@.lr.ph.peel_0, main@_15_0)| main@%_13_0)
                  (=> main@_15_0 (= main@%_16_0 (= main@%.03.i4_0 0)))
                  (=> main@verifier.error.loopexit_0
                      (and main@verifier.error.loopexit_0 main@_15_0))
                  (=> (and main@verifier.error.loopexit_0 main@_15_0)
                      main@%_16_0)
                  (=> (and main@verifier.error.loopexit_0 main@_15_0)
                      (= main@%.7.i.lcssa_0 main@%.03.i4_0))
                  (=> (and main@verifier.error.loopexit_0 main@_15_0)
                      (= main@%.7.i.lcssa_1 main@%.7.i.lcssa_0))
                  (=> main@verifier.error.loopexit_0
                      (= main@%phitmp_0 (= main@%.7.i.lcssa_1 0)))
                  (=> main@verifier.error_0
                      (and main@verifier.error_0 main@verifier.error.loopexit_0))
                  (=> (and main@verifier.error_0 main@verifier.error.loopexit_0)
                      (= main@%.1.i.lcssa_0 main@%phitmp_0))
                  (=> (and main@verifier.error_0 main@verifier.error.loopexit_0)
                      (= main@%.1.i.lcssa_1 main@%.1.i.lcssa_0))
                  (=> main@verifier.error_0 (not main@%.1.i.lcssa_1))
                  (=> main@verifier.error.split_0
                      (and main@verifier.error.split_0 main@verifier.error_0))
                  main@verifier.error.split_0)))
    (=> a!2 main@verifier.error.split)))))
(assert (forall ((main@%loop.bound_0 Int)
         (main@%.1.i2_2 Int)
         (main@.lr.ph_1 Bool)
         (main@%.1.i2_1 Int)
         (main@.lr.ph_0 Bool)
         (main@%.7.i_0 Int)
         (main@%_17_0 Bool)
         (main@%.1.i2_0 Int))
  (let ((a!1 (and (main@.lr.ph main@%.1.i2_0 main@%loop.bound_0)
                  (= main@%.7.i_0 (+ main@%.1.i2_0 (- 1)))
                  (= main@%_17_0 (> main@%.1.i2_0 main@%loop.bound_0))
                  (=> main@.lr.ph_1 (and main@.lr.ph_1 main@.lr.ph_0))
                  (=> (and main@.lr.ph_1 main@.lr.ph_0) main@%_17_0)
                  (=> (and main@.lr.ph_1 main@.lr.ph_0)
                      (= main@%.1.i2_1 main@%.7.i_0))
                  (=> (and main@.lr.ph_1 main@.lr.ph_0)
                      (= main@%.1.i2_2 main@%.1.i2_1))
                  main@.lr.ph_1)))
    (=> a!1 (main@.lr.ph main@%.1.i2_2 main@%loop.bound_0)))))
(assert (forall ((main@verifier.error.split_0 Bool)
         (main@verifier.error_0 Bool)
         (main@%.1.i.lcssa_1 Bool)
         (main@%.1.i.lcssa_0 Bool)
         (main@verifier.error.loopexit_0 Bool)
         (main@%phitmp_0 Bool)
         (main@%.7.i.lcssa_1 Int)
         (main@%.7.i.lcssa_0 Int)
         (main@.lr.ph_0 Bool)
         (main@%.7.i_0 Int)
         (main@%_17_0 Bool)
         (main@%loop.bound_0 Int)
         (main@%.1.i2_0 Int))
  (let ((a!1 (and (main@.lr.ph main@%.1.i2_0 main@%loop.bound_0)
                  (= main@%.7.i_0 (+ main@%.1.i2_0 (- 1)))
                  (= main@%_17_0 (> main@%.1.i2_0 main@%loop.bound_0))
                  (=> main@verifier.error.loopexit_0
                      (and main@verifier.error.loopexit_0 main@.lr.ph_0))
                  (=> (and main@verifier.error.loopexit_0 main@.lr.ph_0)
                      (not main@%_17_0))
                  (=> (and main@verifier.error.loopexit_0 main@.lr.ph_0)
                      (= main@%.7.i.lcssa_0 main@%.7.i_0))
                  (=> (and main@verifier.error.loopexit_0 main@.lr.ph_0)
                      (= main@%.7.i.lcssa_1 main@%.7.i.lcssa_0))
                  (=> main@verifier.error.loopexit_0
                      (= main@%phitmp_0 (= main@%.7.i.lcssa_1 0)))
                  (=> main@verifier.error_0
                      (and main@verifier.error_0 main@verifier.error.loopexit_0))
                  (=> (and main@verifier.error_0 main@verifier.error.loopexit_0)
                      (= main@%.1.i.lcssa_0 main@%phitmp_0))
                  (=> (and main@verifier.error_0 main@verifier.error.loopexit_0)
                      (= main@%.1.i.lcssa_1 main@%.1.i.lcssa_0))
                  (=> main@verifier.error_0 (not main@%.1.i.lcssa_1))
                  (=> main@verifier.error.split_0
                      (and main@verifier.error.split_0 main@verifier.error_0))
                  main@verifier.error.split_0)))
    (=> a!1 main@verifier.error.split))))
(assert (=> main@verifier.error.split false))
(check-sat)
