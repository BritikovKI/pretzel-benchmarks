(set-logic HORN)
(set-info :source |
  Benchmark: ../golem/build/RealCodeNested/originalcodeSymStoreOpenSMTsceleton.c
  Generated by Korn 0.4 https://github.com/gernst/korn
|)


(declare-fun $main_sum1 (Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun __assert_fail (Int Int Int Int) Bool)
(declare-fun $main_inv1 (Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun $main_inv3 (Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun $main_sum3 (Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun $__VERIFIER_assert_pre (Int) Bool)
(declare-fun $main_if2 (Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun $__VERIFIER_assert_if1 (Int Int) Bool)
(declare-fun $main_inv2 (Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun $main_sum2 (Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun __VERIFIER_assert (Int) Bool)
(declare-fun $__assert_fail_pre (Int Int Int Int) Bool)
(declare-fun $main_if3 (Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun $__VERIFIER_assert_ERROR (Int Int) Bool)

; label ERROR
(assert
  (forall ((cond!1 Int))
    (=> (and (not (not (= cond!1 0)))
             ($__VERIFIER_assert_pre cond!1))
        ($__VERIFIER_assert_ERROR cond!1 cond!1))))

; error
(assert
  (forall ((cond!1 Int) (cond!2 Int))
    (=> (and ($__VERIFIER_assert_ERROR cond!1 cond!2))
        false)))

; if else
(assert
  (forall ((cond!1 Int))
    (=> (and (not (not (not (= cond!1 0))))
             ($__VERIFIER_assert_pre cond!1))
        ($__VERIFIER_assert_if1 cond!1 cond!1))))

; post __VERIFIER_assert
(assert
  (forall ((cond!1 Int) (cond!3 Int))
    (=> (and ($__VERIFIER_assert_if1 cond!1 cond!3))
        (__VERIFIER_assert cond!1))))

; if else
(assert
  (forall ((symbolsSize!5 Int) (j!9 Int) (k!12 Int) (sizeMismatch!4 Int) (otherSymbolsSize!6 Int) (symbolsMatch!8 Int) (my_v!11 Int) (i!7 Int) (idToName!10 Int))
    (=> (and (not (not (= symbolsSize!5 otherSymbolsSize!6)))
             (<= 5 otherSymbolsSize!6)
             (<= otherSymbolsSize!6 10000)
             (<= 5 symbolsSize!5)
             (<= symbolsSize!5 10000))
        ($main_if2 sizeMismatch!4 symbolsSize!5 otherSymbolsSize!6 i!7 symbolsMatch!8 j!9 idToName!10 my_v!11 k!12 sizeMismatch!4 symbolsSize!5 otherSymbolsSize!6 i!7 symbolsMatch!8 j!9 idToName!10 my_v!11 k!12))))

; loop entry $main_inv1 (line 16)
(assert
  (forall ((symbolsSize!5 Int) (k!12 Int) (sizeMismatch!4 Int) (otherSymbolsSize!6 Int) (symbolsMatch!8 Int) (i!16 Int) (my_v!11 Int) (k!21 Int) (symbolsMatch!17 Int) (i!7 Int) (my_v!20 Int) (j!18 Int) (j!9 Int) (idToName!19 Int) (symbolsSize!14 Int) (sizeMismatch!13 Int) (idToName!10 Int) (otherSymbolsSize!15 Int))
    (=> (and (= i!16 0)
             ($main_if2 sizeMismatch!4 symbolsSize!5 otherSymbolsSize!6 i!7 symbolsMatch!8 j!9 idToName!10 my_v!11 k!12 sizeMismatch!13 symbolsSize!14 otherSymbolsSize!15 i!16 symbolsMatch!17 j!18 idToName!19 my_v!20 k!21))
        ($main_inv1 sizeMismatch!13 symbolsSize!14 otherSymbolsSize!15 i!16 symbolsMatch!17 j!18 idToName!19 my_v!20 k!21))))

; loop term $main_sum1 (line 16)
(assert
  (forall ((k!30 Int) (sizeMismatch!22 Int) (otherSymbolsSize!24 Int) (my_v!29 Int) (idToName!28 Int) (i!25 Int) (j!27 Int) (symbolsMatch!26 Int) (symbolsSize!23 Int))
    (=> (and (not (< i!25 symbolsSize!23))
             ($main_inv1 sizeMismatch!22 symbolsSize!23 otherSymbolsSize!24 i!25 symbolsMatch!26 j!27 idToName!28 my_v!29 k!30))
        ($main_sum1 sizeMismatch!22 symbolsSize!23 otherSymbolsSize!24 i!25 symbolsMatch!26 j!27 idToName!28 my_v!29 k!30))))

; if else
(assert
  (forall ((k!30 Int) (sizeMismatch!22 Int) (otherSymbolsSize!24 Int) (my_v!29 Int) (idToName!28 Int) (i!25 Int) (j!27 Int) (symbolsMatch!26 Int) (symbolsSize!23 Int))
    (=> (and (not (not (= symbolsMatch!26 0)))
             (< i!25 symbolsSize!23)
             ($main_inv1 sizeMismatch!22 symbolsSize!23 otherSymbolsSize!24 i!25 symbolsMatch!26 j!27 idToName!28 my_v!29 k!30))
        ($main_if3 sizeMismatch!22 symbolsSize!23 otherSymbolsSize!24 i!25 symbolsMatch!26 j!27 idToName!28 my_v!29 k!30 sizeMismatch!22 symbolsSize!23 otherSymbolsSize!24 i!25 symbolsMatch!26 j!27 idToName!28 my_v!29 k!30))))

; VERIFIER_assert (or (< (+ i!34 1) symbolsSize!32) (= (+ i!34 1) symbolsSize!32))
(assert
  (forall ((sizeMismatch!22 Int) (otherSymbolsSize!24 Int) (my_v!29 Int) (otherSymbolsSize!33 Int) (k!39 Int) (sizeMismatch!31 Int) (j!36 Int) (i!25 Int) (symbolsMatch!35 Int) (j!27 Int) (k!30 Int) (my_v!38 Int) (symbolsMatch!26 Int) (symbolsSize!23 Int) (i!34 Int) (idToName!37 Int) (symbolsSize!32 Int) (idToName!28 Int))
    (=> (and (not (or (< (+ i!34 1) symbolsSize!32) (= (+ i!34 1) symbolsSize!32)))
             ($main_if3 sizeMismatch!22 symbolsSize!23 otherSymbolsSize!24 i!25 symbolsMatch!26 j!27 idToName!28 my_v!29 k!30 sizeMismatch!31 symbolsSize!32 otherSymbolsSize!33 i!34 symbolsMatch!35 j!36 idToName!37 my_v!38 k!39))
        false)))

; forwards $main_inv1 (line 16)
(assert
  (forall ((sizeMismatch!22 Int) (otherSymbolsSize!24 Int) (my_v!29 Int) (otherSymbolsSize!33 Int) (k!39 Int) (sizeMismatch!31 Int) (j!36 Int) (i!25 Int) (symbolsMatch!35 Int) (j!27 Int) (k!30 Int) (my_v!38 Int) (symbolsMatch!26 Int) (symbolsSize!23 Int) (i!34 Int) (idToName!37 Int) (symbolsSize!32 Int) (idToName!28 Int))
    (=> (and ($main_if3 sizeMismatch!22 symbolsSize!23 otherSymbolsSize!24 i!25 symbolsMatch!26 j!27 idToName!28 my_v!29 k!30 sizeMismatch!31 symbolsSize!32 otherSymbolsSize!33 i!34 symbolsMatch!35 j!36 idToName!37 my_v!38 k!39))
        ($main_inv1 sizeMismatch!31 symbolsSize!32 otherSymbolsSize!33 (+ i!34 1) symbolsMatch!35 j!36 idToName!37 my_v!38 k!39))))

; loop entry $main_inv2 (line 26)
(assert
  (forall ((symbolsSize!41 Int) (symbolsMatch!44 Int) (j!45 Int) (k!48 Int) (idToName!46 Int) (my_v!47 Int) (sizeMismatch!40 Int) (otherSymbolsSize!42 Int) (i!43 Int))
    (=> (and (<= 5 idToName!46)
             (<= idToName!46 10000)
             (= j!45 0)
             ($main_sum1 sizeMismatch!40 symbolsSize!41 otherSymbolsSize!42 i!43 symbolsMatch!44 j!45 idToName!46 my_v!47 k!48))
        ($main_inv2 sizeMismatch!40 symbolsSize!41 otherSymbolsSize!42 i!43 symbolsMatch!44 j!45 idToName!46 my_v!47 k!48))))

; loop term $main_sum2 (line 26)
(assert
  (forall ((symbolsSize!50 Int) (i!52 Int) (j!54 Int) (k!57 Int) (my_v!56 Int) (otherSymbolsSize!51 Int) (symbolsMatch!53 Int) (idToName!55 Int) (sizeMismatch!49 Int))
    (=> (and (not (< j!54 idToName!55))
             ($main_inv2 sizeMismatch!49 symbolsSize!50 otherSymbolsSize!51 i!52 symbolsMatch!53 j!54 idToName!55 my_v!56 k!57))
        ($main_sum2 sizeMismatch!49 symbolsSize!50 otherSymbolsSize!51 i!52 symbolsMatch!53 j!54 idToName!55 my_v!56 k!57))))

; loop entry $main_inv3 (line 30)
(assert
  (forall ((symbolsSize!50 Int) (i!52 Int) (j!54 Int) (k!57 Int) (my_v!56 Int) (otherSymbolsSize!51 Int) (symbolsMatch!53 Int) (idToName!55 Int) (sizeMismatch!49 Int))
    (=> (and (= k!57 0)
             (<= 5 my_v!56)
             (<= my_v!56 10000)
             (< j!54 idToName!55)
             ($main_inv2 sizeMismatch!49 symbolsSize!50 otherSymbolsSize!51 i!52 symbolsMatch!53 j!54 idToName!55 my_v!56 k!57))
        ($main_inv3 sizeMismatch!49 symbolsSize!50 otherSymbolsSize!51 i!52 symbolsMatch!53 j!54 idToName!55 my_v!56 k!57))))

; loop term $main_sum3 (line 30)
(assert
  (forall ((sizeMismatch!58 Int) (idToName!64 Int) (symbolsSize!59 Int) (symbolsMatch!62 Int) (my_v!65 Int) (otherSymbolsSize!60 Int) (k!66 Int) (j!63 Int) (i!61 Int))
    (=> (and (not (< k!66 my_v!65))
             ($main_inv3 sizeMismatch!58 symbolsSize!59 otherSymbolsSize!60 i!61 symbolsMatch!62 j!63 idToName!64 my_v!65 k!66))
        ($main_sum3 sizeMismatch!58 symbolsSize!59 otherSymbolsSize!60 i!61 symbolsMatch!62 j!63 idToName!64 my_v!65 k!66))))

; forwards $main_inv3 (line 30)
(assert
  (forall ((sizeMismatch!58 Int) (idToName!64 Int) (symbolsSize!59 Int) (symbolsMatch!62 Int) (my_v!65 Int) (otherSymbolsSize!60 Int) (k!66 Int) (j!63 Int) (i!61 Int))
    (=> (and (< k!66 my_v!65)
             ($main_inv3 sizeMismatch!58 symbolsSize!59 otherSymbolsSize!60 i!61 symbolsMatch!62 j!63 idToName!64 my_v!65 k!66))
        ($main_inv3 sizeMismatch!58 symbolsSize!59 otherSymbolsSize!60 i!61 symbolsMatch!62 j!63 idToName!64 my_v!65 (+ k!66 1)))))

; forwards $main_inv2 (line 26)
(assert
  (forall ((j!72 Int) (idToName!73 Int) (i!70 Int) (my_v!74 Int) (sizeMismatch!67 Int) (symbolsMatch!71 Int) (k!75 Int) (otherSymbolsSize!69 Int) (symbolsSize!68 Int))
    (=> (and ($main_sum3 sizeMismatch!67 symbolsSize!68 otherSymbolsSize!69 i!70 symbolsMatch!71 j!72 idToName!73 my_v!74 k!75))
        ($main_inv2 sizeMismatch!67 symbolsSize!68 otherSymbolsSize!69 i!70 symbolsMatch!71 (+ j!72 1) idToName!73 my_v!74 k!75))))

(check-sat)
