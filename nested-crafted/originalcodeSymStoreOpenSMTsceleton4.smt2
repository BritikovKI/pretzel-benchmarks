(set-logic HORN)
(set-info :source |
  Benchmark: ../golem/build/RealCodeNested/originalcodeSymStoreOpenSMTsceleton4.c
  Generated by Korn 0.4 https://github.com/gernst/korn
|)


(declare-fun $main_sum1 (Int Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun $main_inv3 (Int Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun $main_sum2 (Int Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun __assert_fail (Int Int Int Int) Bool)
(declare-fun $main_inv2 (Int Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun $__VERIFIER_assert_pre (Int) Bool)
(declare-fun $__VERIFIER_assert_if1 (Int Int) Bool)
(declare-fun $main_if3 (Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun $main_sum3 (Int Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun $my_v_pre () Bool)
(declare-fun $main_if2 (Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun my_v (Int) Bool)
(declare-fun $main_inv1 (Int Int Int Int Int Int Int Int Int Int) Bool)
(declare-fun __VERIFIER_assert (Int) Bool)
(declare-fun $__assert_fail_pre (Int Int Int Int) Bool)
(declare-fun $__VERIFIER_assert_ERROR (Int Int) Bool)

; label ERROR
(assert
  (forall ((cond!1 Int))
    (=> (and (not (not (= cond!1 0)))
             ($__VERIFIER_assert_pre cond!1))
        ($__VERIFIER_assert_ERROR cond!1 cond!1))))

; error
(assert
  (forall ((cond!1 Int) (cond!2 Int))
    (=> (and ($__VERIFIER_assert_ERROR cond!1 cond!2))
        false)))

; if else
(assert
  (forall ((cond!1 Int))
    (=> (and (not (not (not (= cond!1 0))))
             ($__VERIFIER_assert_pre cond!1))
        ($__VERIFIER_assert_if1 cond!1 cond!1))))

; post __VERIFIER_assert
(assert
  (forall ((cond!1 Int) (cond!3 Int))
    (=> (and ($__VERIFIER_assert_if1 cond!1 cond!3))
        (__VERIFIER_assert cond!1))))

; if else
(assert
  (forall ((symbolsSize!5 Int) (name_c!11 Int) (j!9 Int) (my_v!13 Int) (sizeMismatch!4 Int) (otherSymbolsSize!6 Int) (k!10 Int) (i!7 Int) (symbolsMatch!8 Int) (idToName!12 Int))
    (=> (and (not (not (= symbolsSize!5 otherSymbolsSize!6)))
             (<= 2 otherSymbolsSize!6)
             (<= otherSymbolsSize!6 10000)
             (<= 20 symbolsSize!5)
             (<= symbolsSize!5 10000))
        ($main_if2 sizeMismatch!4 symbolsSize!5 otherSymbolsSize!6 i!7 symbolsMatch!8 j!9 k!10 name_c!11 idToName!12 my_v!13 sizeMismatch!4 symbolsSize!5 otherSymbolsSize!6 i!7 symbolsMatch!8 j!9 k!10 name_c!11 idToName!12 my_v!13))))

; loop entry $main_inv1 (line 16)
(assert
  (forall ((symbolsSize!5 Int) (my_v!13 Int) (sizeMismatch!4 Int) (otherSymbolsSize!6 Int) (otherSymbolsSize!16 Int) (symbolsSize!15 Int) (i!17 Int) (name_c!11 Int) (idToName!22 Int) (j!9 Int) (k!20 Int) (symbolsMatch!8 Int) (idToName!12 Int) (my_v!23 Int) (sizeMismatch!14 Int) (symbolsMatch!18 Int) (k!10 Int) (name_c!21 Int) (i!7 Int) (j!19 Int))
    (=> (and (= i!17 0)
             ($main_if2 sizeMismatch!4 symbolsSize!5 otherSymbolsSize!6 i!7 symbolsMatch!8 j!9 k!10 name_c!11 idToName!12 my_v!13 sizeMismatch!14 symbolsSize!15 otherSymbolsSize!16 i!17 symbolsMatch!18 j!19 k!20 name_c!21 idToName!22 my_v!23))
        ($main_inv1 sizeMismatch!14 symbolsSize!15 otherSymbolsSize!16 i!17 symbolsMatch!18 j!19 k!20 name_c!21 idToName!22 my_v!23))))

; loop term $main_sum1 (line 16)
(assert
  (forall ((k!30 Int) (symbolsMatch!28 Int) (name_c!31 Int) (my_v!33 Int) (j!29 Int) (symbolsSize!25 Int) (i!27 Int) (idToName!32 Int) (sizeMismatch!24 Int) (otherSymbolsSize!26 Int))
    (=> (and (not (< i!27 symbolsSize!25))
             ($main_inv1 sizeMismatch!24 symbolsSize!25 otherSymbolsSize!26 i!27 symbolsMatch!28 j!29 k!30 name_c!31 idToName!32 my_v!33))
        ($main_sum1 sizeMismatch!24 symbolsSize!25 otherSymbolsSize!26 i!27 symbolsMatch!28 j!29 k!30 name_c!31 idToName!32 my_v!33))))

; if else
(assert
  (forall ((k!30 Int) (symbolsMatch!28 Int) (name_c!31 Int) (my_v!33 Int) (j!29 Int) (symbolsSize!25 Int) (i!27 Int) (idToName!32 Int) (sizeMismatch!24 Int) (otherSymbolsSize!26 Int))
    (=> (and (not (not (= symbolsMatch!28 0)))
             (< i!27 symbolsSize!25)
             ($main_inv1 sizeMismatch!24 symbolsSize!25 otherSymbolsSize!26 i!27 symbolsMatch!28 j!29 k!30 name_c!31 idToName!32 my_v!33))
        ($main_if3 sizeMismatch!24 symbolsSize!25 otherSymbolsSize!26 i!27 symbolsMatch!28 j!29 k!30 name_c!31 idToName!32 my_v!33 sizeMismatch!24 symbolsSize!25 otherSymbolsSize!26 i!27 symbolsMatch!28 j!29 k!30 name_c!31 idToName!32 my_v!33))))

; forwards $main_inv1 (line 16)
(assert
  (forall ((idToName!42 Int) (k!30 Int) (symbolsMatch!38 Int) (k!40 Int) (my_v!33 Int) (j!29 Int) (symbolsSize!25 Int) (name_c!41 Int) (otherSymbolsSize!36 Int) (j!39 Int) (my_v!43 Int) (i!27 Int) (idToName!32 Int) (sizeMismatch!34 Int) (sizeMismatch!24 Int) (otherSymbolsSize!26 Int) (i!37 Int) (symbolsMatch!28 Int) (symbolsSize!35 Int) (name_c!31 Int))
    (=> (and ($main_if3 sizeMismatch!24 symbolsSize!25 otherSymbolsSize!26 i!27 symbolsMatch!28 j!29 k!30 name_c!31 idToName!32 my_v!33 sizeMismatch!34 symbolsSize!35 otherSymbolsSize!36 i!37 symbolsMatch!38 j!39 k!40 name_c!41 idToName!42 my_v!43))
        ($main_inv1 sizeMismatch!34 symbolsSize!35 otherSymbolsSize!36 (+ i!37 1) symbolsMatch!38 j!39 k!40 name_c!41 idToName!42 my_v!43))))

; loop entry $main_inv2 (line 26)
(assert
  (forall ((name_c!51 Int) (otherSymbolsSize!46 Int) (i!47 Int) (idToName!52 Int) (my_v!53 Int) (symbolsSize!45 Int) (symbolsMatch!48 Int) (sizeMismatch!44 Int) (j!49 Int) (k!50 Int))
    (=> (and (<= 20 idToName!52)
             (<= idToName!52 10000)
             (= name_c!51 0)
             (= k!50 0)
             (= j!49 0)
             ($main_sum1 sizeMismatch!44 symbolsSize!45 otherSymbolsSize!46 i!47 symbolsMatch!48 j!49 k!50 name_c!51 idToName!52 my_v!53))
        ($main_inv2 sizeMismatch!44 symbolsSize!45 otherSymbolsSize!46 i!47 symbolsMatch!48 j!49 k!50 name_c!51 idToName!52 my_v!53))))

; loop term $main_sum2 (line 26)
(assert
  (forall ((j!59 Int) (symbolsMatch!58 Int) (k!60 Int) (otherSymbolsSize!56 Int) (my_v!63 Int) (symbolsSize!55 Int) (idToName!62 Int) (sizeMismatch!54 Int) (name_c!61 Int) (i!57 Int))
    (=> (and (not (< j!59 idToName!62))
             ($main_inv2 sizeMismatch!54 symbolsSize!55 otherSymbolsSize!56 i!57 symbolsMatch!58 j!59 k!60 name_c!61 idToName!62 my_v!63))
        ($main_sum2 sizeMismatch!54 symbolsSize!55 otherSymbolsSize!56 i!57 symbolsMatch!58 j!59 k!60 name_c!61 idToName!62 my_v!63))))

; loop entry $main_inv3 (line 29)
(assert
  (forall ((j!59 Int) (symbolsMatch!58 Int) (k!60 Int) (otherSymbolsSize!56 Int) (my_v!63 Int) (symbolsSize!55 Int) (idToName!62 Int) (sizeMismatch!54 Int) (name_c!61 Int) (i!57 Int))
    (=> (and (<= 5 my_v!63)
             (<= my_v!63 10000)
             (< j!59 idToName!62)
             ($main_inv2 sizeMismatch!54 symbolsSize!55 otherSymbolsSize!56 i!57 symbolsMatch!58 j!59 k!60 name_c!61 idToName!62 my_v!63))
        ($main_inv3 sizeMismatch!54 symbolsSize!55 otherSymbolsSize!56 i!57 symbolsMatch!58 j!59 k!60 name_c!61 idToName!62 my_v!63))))

; loop term $main_sum3 (line 29)
(assert
  (forall ((otherSymbolsSize!66 Int) (i!67 Int) (symbolsMatch!68 Int) (symbolsSize!65 Int) (my_v!73 Int) (name_c!71 Int) (idToName!72 Int) (sizeMismatch!64 Int) (j!69 Int) (k!70 Int))
    (=> (and (not (< k!70 my_v!73))
             ($main_inv3 sizeMismatch!64 symbolsSize!65 otherSymbolsSize!66 i!67 symbolsMatch!68 j!69 k!70 name_c!71 idToName!72 my_v!73))
        ($main_sum3 sizeMismatch!64 symbolsSize!65 otherSymbolsSize!66 i!67 symbolsMatch!68 j!69 k!70 name_c!71 idToName!72 my_v!73))))

; forwards $main_inv3 (line 29)
(assert
  (forall ((otherSymbolsSize!66 Int) (i!67 Int) (symbolsMatch!68 Int) (symbolsSize!65 Int) (my_v!73 Int) (name_c!71 Int) (idToName!72 Int) (sizeMismatch!64 Int) (j!69 Int) (k!70 Int))
    (=> (and (< k!70 my_v!73)
             ($main_inv3 sizeMismatch!64 symbolsSize!65 otherSymbolsSize!66 i!67 symbolsMatch!68 j!69 k!70 name_c!71 idToName!72 my_v!73))
        ($main_inv3 sizeMismatch!64 symbolsSize!65 otherSymbolsSize!66 i!67 symbolsMatch!68 j!69 (+ k!70 1) (+ name_c!71 1) idToName!72 my_v!73))))

; forwards $main_inv2 (line 26)
(assert
  (forall ((symbolsSize!75 Int) (sizeMismatch!74 Int) (my_v!83 Int) (symbolsMatch!78 Int) (name_c!81 Int) (k!80 Int) (otherSymbolsSize!76 Int) (i!77 Int) (idToName!82 Int) (j!79 Int))
    (=> (and ($main_sum3 sizeMismatch!74 symbolsSize!75 otherSymbolsSize!76 i!77 symbolsMatch!78 j!79 k!80 name_c!81 idToName!82 my_v!83))
        ($main_inv2 sizeMismatch!74 symbolsSize!75 otherSymbolsSize!76 i!77 symbolsMatch!78 (+ j!79 1) 0 name_c!81 idToName!82 my_v!83))))

; VERIFIER_assert (< name_c!91 (* j!89 3))
(assert
  (forall ((symbolsMatch!88 Int) (k!90 Int) (i!87 Int) (name_c!91 Int) (idToName!92 Int) (j!89 Int) (otherSymbolsSize!86 Int) (my_v!93 Int) (sizeMismatch!84 Int) (symbolsSize!85 Int))
    (=> (and (not (< name_c!91 (* j!89 3)))
             ($main_sum2 sizeMismatch!84 symbolsSize!85 otherSymbolsSize!86 i!87 symbolsMatch!88 j!89 k!90 name_c!91 idToName!92 my_v!93))
        false)))

(check-sat)
