(set-logic HORN)
(set-info :source |
  Benchmark: ../golem/build/DoubleNestedLoopMinimalSATI.c
  Generated by Korn 0.4 https://github.com/gernst/korn
|)


(declare-fun $main_sum4 (Int Int Int Int) Bool)
(declare-fun $main_inv4 (Int Int Int Int) Bool)
(declare-fun $main_inv5 (Int Int Int Int) Bool)
(declare-fun $main_sum3 (Int Int Int Int) Bool)
(declare-fun $main_inv2 (Int Int Int Int) Bool)
(declare-fun $main_if2 (Int Int Int Int Int Int Int Int) Bool)
(declare-fun $__VERIFIER_assert_pre (Int) Bool)
(declare-fun $main_sum5 (Int Int Int Int) Bool)
(declare-fun $__VERIFIER_assert_if1 (Int Int) Bool)
(declare-fun $main_sum1 (Int Int Int Int) Bool)
(declare-fun $main_if3 (Int Int Int Int Int Int Int Int) Bool)
(declare-fun $main_inv3 (Int Int Int Int) Bool)
(declare-fun __VERIFIER_assert (Int) Bool)
(declare-fun $main_sum2 (Int Int Int Int) Bool)
(declare-fun $main_inv1 (Int Int Int Int) Bool)
(declare-fun $__VERIFIER_assert_ERROR (Int Int) Bool)

; label ERROR
(assert
  (forall ((cond!1 Int))
    (=> (and (not (not (= cond!1 0)))
             ($__VERIFIER_assert_pre cond!1))
        ($__VERIFIER_assert_ERROR cond!1 cond!1))))

; error
(assert
  (forall ((cond!1 Int) (cond!2 Int))
    (=> (and ($__VERIFIER_assert_ERROR cond!1 cond!2))
        false)))

; if else
(assert
  (forall ((cond!1 Int))
    (=> (and (not (not (not (= cond!1 0))))
             ($__VERIFIER_assert_pre cond!1))
        ($__VERIFIER_assert_if1 cond!1 cond!1))))

; post __VERIFIER_assert
(assert
  (forall ((cond!1 Int) (cond!3 Int))
    (=> (and ($__VERIFIER_assert_if1 cond!1 cond!3))
        (__VERIFIER_assert cond!1))))

; loop entry $main_inv1 (line 12)
(assert
  (forall ((x0!4 Int) (x1!5 Int))
    (=> (and (<= 0 x1!5)
             (<= x1!5 5)
             (<= 0 x0!4)
             (<= x0!4 10))
        ($main_inv1 x0!4 x1!5 x1!5 0))))

; loop term $main_sum1 (line 12)
(assert
  (forall ((x0!8 Int) (x1!9 Int) (x2!10 Int) (x3!11 Int))
    (=> (and (not (< x3!11 105))
             ($main_inv1 x0!8 x1!9 x2!10 x3!11))
        ($main_sum1 x0!8 x1!9 x2!10 x3!11))))

; loop entry $main_inv2 (line 13)
(assert
  (forall ((x0!8 Int) (x1!9 Int) (x2!10 Int) (x3!11 Int))
    (=> (and (< x3!11 105)
             ($main_inv1 x0!8 x1!9 x2!10 x3!11))
        ($main_inv2 x0!8 x1!9 x2!10 x3!11))))

; loop term $main_sum2 (line 13)
(assert
  (forall ((x0!12 Int) (x1!13 Int) (x2!14 Int) (x3!15 Int))
    (=> (and (not (< x0!12 15))
             ($main_inv2 x0!12 x1!13 x2!14 x3!15))
        ($main_sum2 x0!12 x1!13 x2!14 x3!15))))

; if then
(assert
  (forall ((x0!12 Int) (x1!13 Int) (x2!14 Int) (x3!15 Int))
    (=> (and (> x0!12 7)
             (< x0!12 15)
             ($main_inv2 x0!12 x1!13 x2!14 x3!15))
        ($main_if2 x0!12 x1!13 x2!14 x3!15 x0!12 x1!13 x2!14 (+ x3!15 5)))))

; if else
(assert
  (forall ((x0!12 Int) (x1!13 Int) (x2!14 Int) (x3!15 Int))
    (=> (and (not (> x0!12 7))
             (< x0!12 15)
             ($main_inv2 x0!12 x1!13 x2!14 x3!15))
        ($main_if2 x0!12 x1!13 x2!14 x3!15 x0!12 x1!13 x2!14 x3!15))))

; if then
(assert
  (forall ((x3!19 Int) (x2!18 Int) (x3!15 Int) (x0!12 Int) (x0!16 Int) (x1!13 Int) (x2!14 Int) (x1!17 Int))
    (=> (and (< (+ x0!16 1) 12)
             ($main_if2 x0!12 x1!13 x2!14 x3!15 x0!16 x1!17 x2!18 x3!19))
        ($main_if3 x0!12 x1!13 x2!14 x3!15 (+ x0!16 1) (+ x1!17 1) x2!18 (- x3!19 1)))))

; if else
(assert
  (forall ((x3!19 Int) (x2!18 Int) (x3!15 Int) (x0!12 Int) (x0!16 Int) (x1!13 Int) (x2!14 Int) (x1!17 Int))
    (=> (and (not (< (+ x0!16 1) 12))
             ($main_if2 x0!12 x1!13 x2!14 x3!15 x0!16 x1!17 x2!18 x3!19))
        ($main_if3 x0!12 x1!13 x2!14 x3!15 (+ x0!16 1) (+ x1!17 1) x2!18 x3!19))))

; forwards $main_inv2 (line 13)
(assert
  (forall ((x1!21 Int) (x3!15 Int) (x0!12 Int) (x2!14 Int) (x2!22 Int) (x1!13 Int) (x3!23 Int) (x0!20 Int))
    (=> (and ($main_if3 x0!12 x1!13 x2!14 x3!15 x0!20 x1!21 x2!22 x3!23))
        ($main_inv2 x0!20 x1!21 x2!22 x3!23))))

; loop entry $main_inv3 (line 23)
(assert
  (forall ((x0!24 Int) (x1!25 Int) (x2!26 Int) (x3!27 Int))
    (=> (and ($main_sum2 x0!24 x1!25 x2!26 x3!27))
        ($main_inv3 x0!24 x1!25 x2!26 x3!27))))

; loop term $main_sum3 (line 23)
(assert
  (forall ((x0!28 Int) (x1!29 Int) (x2!30 Int) (x3!31 Int))
    (=> (and (not (> x0!28 0))
             ($main_inv3 x0!28 x1!29 x2!30 x3!31))
        ($main_sum3 x0!28 x1!29 x2!30 x3!31))))

; loop entry $main_inv4 (line 25)
(assert
  (forall ((x0!28 Int) (x1!29 Int) (x2!30 Int) (x3!31 Int))
    (=> (and (> x0!28 0)
             ($main_inv3 x0!28 x1!29 x2!30 x3!31))
        ($main_inv4 (- x0!28 1) x1!29 x2!30 x3!31))))

; loop term $main_sum4 (line 25)
(assert
  (forall ((x0!32 Int) (x1!33 Int) (x2!34 Int) (x3!35 Int))
    (=> (and (not (< x2!34 50))
             ($main_inv4 x0!32 x1!33 x2!34 x3!35))
        ($main_sum4 x0!32 x1!33 x2!34 x3!35))))

; forwards $main_inv4 (line 25)
(assert
  (forall ((x0!32 Int) (x1!33 Int) (x2!34 Int) (x3!35 Int))
    (=> (and (< x2!34 50)
             ($main_inv4 x0!32 x1!33 x2!34 x3!35))
        ($main_inv4 x0!32 x1!33 (+ x2!34 1) x3!35))))

; loop entry $main_inv5 (line 29)
(assert
  (forall ((x0!36 Int) (x1!37 Int) (x2!38 Int) (x3!39 Int))
    (=> (and ($main_sum4 x0!36 x1!37 x2!38 x3!39))
        ($main_inv5 x0!36 (- x1!37 1) x2!38 x3!39))))

; loop term $main_sum5 (line 29)
(assert
  (forall ((x0!40 Int) (x1!41 Int) (x2!42 Int) (x3!43 Int))
    (=> (and (not (> x2!42 0))
             ($main_inv5 x0!40 x1!41 x2!42 x3!43))
        ($main_sum5 x0!40 x1!41 x2!42 x3!43))))

; forwards $main_inv5 (line 29)
(assert
  (forall ((x0!40 Int) (x1!41 Int) (x2!42 Int) (x3!43 Int))
    (=> (and (> x2!42 0)
             ($main_inv5 x0!40 x1!41 x2!42 x3!43))
        ($main_inv5 x0!40 x1!41 (- x2!42 20) x3!43))))

; forwards $main_inv3 (line 23)
(assert
  (forall ((x0!44 Int) (x1!45 Int) (x2!46 Int) (x3!47 Int))
    (=> (and ($main_sum5 x0!44 x1!45 x2!46 x3!47))
        ($main_inv3 x0!44 x1!45 x2!46 x3!47))))

; forwards $main_inv1 (line 12)
(assert
  (forall ((x0!48 Int) (x1!49 Int) (x2!50 Int) (x3!51 Int))
    (=> (and ($main_sum3 x0!48 x1!49 x2!50 x3!51))
        ($main_inv1 x0!48 x1!49 x2!50 (+ x3!51 1)))))

; VERIFIER_assert (<= x2!54 0)
(assert
  (forall ((x2!54 Int) (x0!52 Int) (x1!53 Int) (x3!55 Int))
    (=> (and (not (<= x2!54 0))
             ($main_sum1 x0!52 x1!53 x2!54 x3!55))
        false)))

(check-sat)
